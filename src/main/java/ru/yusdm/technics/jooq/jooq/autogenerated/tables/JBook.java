/*
 * This file is generated by jOOQ.
 */
package ru.yusdm.technics.jooq.jooq.autogenerated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.yusdm.technics.jooq.jooq.autogenerated.JPublic;
import ru.yusdm.technics.jooq.jooq.autogenerated.Keys;
import ru.yusdm.technics.jooq.jooq.autogenerated.tables.records.JBookRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JBook extends TableImpl<JBookRecord> {

    private static final long serialVersionUID = -273359599;

    /**
     * The reference instance of <code>public.book</code>
     */
    public static final JBook BOOK = new JBook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JBookRecord> getRecordType() {
        return JBookRecord.class;
    }

    /**
     * The column <code>public.book.id</code>.
     */
    public final TableField<JBookRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.book.name</code>.
     */
    public final TableField<JBookRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.book</code> table reference
     */
    public JBook() {
        this(DSL.name("book"), null);
    }

    /**
     * Create an aliased <code>public.book</code> table reference
     */
    public JBook(String alias) {
        this(DSL.name(alias), BOOK);
    }

    /**
     * Create an aliased <code>public.book</code> table reference
     */
    public JBook(Name alias) {
        this(alias, BOOK);
    }

    private JBook(Name alias, Table<JBookRecord> aliased) {
        this(alias, aliased, null);
    }

    private JBook(Name alias, Table<JBookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JBook(Table<O> child, ForeignKey<O, JBookRecord> key) {
        super(child, key, BOOK);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JBookRecord> getPrimaryKey() {
        return Keys.BOOK_PKEY;
    }

    @Override
    public List<UniqueKey<JBookRecord>> getKeys() {
        return Arrays.<UniqueKey<JBookRecord>>asList(Keys.BOOK_PKEY);
    }

    @Override
    public JBook as(String alias) {
        return new JBook(DSL.name(alias), this);
    }

    @Override
    public JBook as(Name alias) {
        return new JBook(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JBook rename(String name) {
        return new JBook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JBook rename(Name name) {
        return new JBook(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
