/*
 * This file is generated by jOOQ.
 */
package ru.yusdm.technics.jooq.jooq.autogenerated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.yusdm.technics.jooq.jooq.autogenerated.JPublic;
import ru.yusdm.technics.jooq.jooq.autogenerated.Keys;
import ru.yusdm.technics.jooq.jooq.autogenerated.tables.records.JCityRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCity extends TableImpl<JCityRecord> {

    private static final long serialVersionUID = 191181990;

    /**
     * The reference instance of <code>public.city</code>
     */
    public static final JCity CITY = new JCity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JCityRecord> getRecordType() {
        return JCityRecord.class;
    }

    /**
     * The column <code>public.city.id</code>.
     */
    public final TableField<JCityRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.city.main_street</code>.
     */
    public final TableField<JCityRecord, String> MAIN_STREET = createField(DSL.name("main_street"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.city.name</code>.
     */
    public final TableField<JCityRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.city.country_id</code>.
     */
    public final TableField<JCityRecord, Long> COUNTRY_ID = createField(DSL.name("country_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.city</code> table reference
     */
    public JCity() {
        this(DSL.name("city"), null);
    }

    /**
     * Create an aliased <code>public.city</code> table reference
     */
    public JCity(String alias) {
        this(DSL.name(alias), CITY);
    }

    /**
     * Create an aliased <code>public.city</code> table reference
     */
    public JCity(Name alias) {
        this(alias, CITY);
    }

    private JCity(Name alias, Table<JCityRecord> aliased) {
        this(alias, aliased, null);
    }

    private JCity(Name alias, Table<JCityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JCity(Table<O> child, ForeignKey<O, JCityRecord> key) {
        super(child, key, CITY);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public Identity<JCityRecord, Long> getIdentity() {
        return Keys.IDENTITY_CITY;
    }

    @Override
    public UniqueKey<JCityRecord> getPrimaryKey() {
        return Keys.CITY_PKEY;
    }

    @Override
    public List<UniqueKey<JCityRecord>> getKeys() {
        return Arrays.<UniqueKey<JCityRecord>>asList(Keys.CITY_PKEY);
    }

    @Override
    public List<ForeignKey<JCityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JCityRecord, ?>>asList(Keys.CITY__FKRPD7J1P7YXR784ADKX4PYEPBA);
    }

    public JCountry country() {
        return new JCountry(this, Keys.CITY__FKRPD7J1P7YXR784ADKX4PYEPBA);
    }

    @Override
    public JCity as(String alias) {
        return new JCity(DSL.name(alias), this);
    }

    @Override
    public JCity as(Name alias) {
        return new JCity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCity rename(String name) {
        return new JCity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCity rename(Name name) {
        return new JCity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
