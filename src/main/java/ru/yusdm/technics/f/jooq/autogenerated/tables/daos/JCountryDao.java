/*
 * This file is generated by jOOQ.
 */
package ru.yusdm.technics.f.jooq.autogenerated.tables.daos;


import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import ru.yusdm.technics.f.jooq.autogenerated.tables.JCountry;
import ru.yusdm.technics.f.jooq.autogenerated.tables.pojos.JpjCountry;
import ru.yusdm.technics.f.jooq.autogenerated.tables.records.JCountryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCountryDao extends DAOImpl<JCountryRecord, JpjCountry, Long> {

    /**
     * Create a new JCountryDao without any configuration
     */
    public JCountryDao() {
        super(JCountry.COUNTRY, JpjCountry.class);
    }

    /**
     * Create a new JCountryDao with an attached configuration
     */
    public JCountryDao(Configuration configuration) {
        super(JCountry.COUNTRY, JpjCountry.class, configuration);
    }

    @Override
    public Long getId(JpjCountry object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JpjCountry> fetchRangeOfJId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JCountry.COUNTRY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<JpjCountry> fetchByJId(Long... values) {
        return fetch(JCountry.COUNTRY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public JpjCountry fetchOneByJId(Long value) {
        return fetchOne(JCountry.COUNTRY.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JpjCountry> fetchRangeOfJName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JCountry.COUNTRY.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<JpjCountry> fetchByJName(String... values) {
        return fetch(JCountry.COUNTRY.NAME, values);
    }

    /**
     * Fetch records that have <code>population BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JpjCountry> fetchRangeOfJPopulation(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JCountry.COUNTRY.POPULATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>population IN (values)</code>
     */
    public List<JpjCountry> fetchByJPopulation(Integer... values) {
        return fetch(JCountry.COUNTRY.POPULATION, values);
    }
}
