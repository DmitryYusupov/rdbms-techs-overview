/*
 * This file is generated by jOOQ.
 */
package ru.yusdm.technics.f.jooq.autogenerated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.yusdm.technics.f.jooq.autogenerated.JPublic;
import ru.yusdm.technics.f.jooq.autogenerated.Keys;
import ru.yusdm.technics.f.jooq.autogenerated.tables.records.JCountryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCountry extends TableImpl<JCountryRecord> {

    private static final long serialVersionUID = -1041050690;

    /**
     * The reference instance of <code>public.country</code>
     */
    public static final JCountry COUNTRY = new JCountry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JCountryRecord> getRecordType() {
        return JCountryRecord.class;
    }

    /**
     * The column <code>public.country.id</code>.
     */
    public final TableField<JCountryRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.country.name</code>.
     */
    public final TableField<JCountryRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.country.population</code>.
     */
    public final TableField<JCountryRecord, Integer> POPULATION = createField(DSL.name("population"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.country</code> table reference
     */
    public JCountry() {
        this(DSL.name("country"), null);
    }

    /**
     * Create an aliased <code>public.country</code> table reference
     */
    public JCountry(String alias) {
        this(DSL.name(alias), COUNTRY);
    }

    /**
     * Create an aliased <code>public.country</code> table reference
     */
    public JCountry(Name alias) {
        this(alias, COUNTRY);
    }

    private JCountry(Name alias, Table<JCountryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JCountry(Name alias, Table<JCountryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JCountry(Table<O> child, ForeignKey<O, JCountryRecord> key) {
        super(child, key, COUNTRY);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public Identity<JCountryRecord, Long> getIdentity() {
        return Keys.IDENTITY_COUNTRY;
    }

    @Override
    public UniqueKey<JCountryRecord> getPrimaryKey() {
        return Keys.COUNTRY_PKEY;
    }

    @Override
    public List<UniqueKey<JCountryRecord>> getKeys() {
        return Arrays.<UniqueKey<JCountryRecord>>asList(Keys.COUNTRY_PKEY);
    }

    @Override
    public JCountry as(String alias) {
        return new JCountry(DSL.name(alias), this);
    }

    @Override
    public JCountry as(Name alias) {
        return new JCountry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCountry rename(String name) {
        return new JCountry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCountry rename(Name name) {
        return new JCountry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
